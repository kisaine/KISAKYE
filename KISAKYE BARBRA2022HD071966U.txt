##Manipulating VCF files

#1. Describe the format of the file and the data stored
A VCF (Variant Call Format) file is a text file format that is used to store genetic variation data, such as single nucleotide polymorphisms (SNPs)
and insertions/deletions (indels). A VCF file consists of two main parts: a header section and a data section.
The header section is indicated by lines that start with the '#' character and contains metadata about the file, such as the version of the VCF format, 
the reference genome used, and the source of the data. The data section contains one line per variant, with each line consisting of several tab-separated fields 
that provide information about the variant, such as its position, reference and alternate alleles, and genotype calls. 


#2. What does the header section of the file contain
The header section of a VCF file contains metadata about the file, including information about the samples and the format of the data. 
This section is denoted by lines starting with "##". Some of the information that may be included in the header section include the version of the VCF file format,
the reference genome used, and the source of the data. Additionally, it may contain information about the filters and quality controls used in generating the file,
and any custom fields or annotations that have been added.

#3. How many samples are in the file
6 samples

bcftools query -l sample.vcf | wc -l

#4. How many variants are in the file
398246

bcftools view -H sample.vcf | wc -l

#5. How would you extract the chromosome, position, QualByDepth and RMSMappingQuality fields? Save the output to a tab-delimited filePostion 1, 2, 

bcftools query -f '%CHROM\t%POS[\t%QD;%MQ]\n' sample.vcf > details.txt

#6. Extract data that belongs to chromosomes 2,4 and MT
awk '$1=="2" || $1=="4" || $1=="MT"' sample.vcf > data.txt

#7. Print out variants that do not belong to chr20:1-30000000
grep -v '^##' sample.vcf > chr20.txt
awk '$1 != "20" || ($1 == "chr20" && ($2 < 1 || $2 > 30000000)) {print $1, $2, $4, $5}' chr20.txt > chr20.txt

#8. Extract variants that belong to SRR13107019
bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\n' -s SRR13107019 sample.vcf > SRR1310.txt

#9. Filter out variants with a QualByDepth above 7
awk -F '\t' '{if ($6>=7) print $0}' sample.vcf > filtering.vcf

#10. How many contigs are referred to in the file. Check the header section
2211
grep -c "^##contig" sample.vcf 

#11. Comment on the eighth and ninth columns of the file.
	The eighth column refers to the identifier for the sample and the ninth column refers to the genotype data for that sample.

#12. Extract data on the read depth of called variants for sample SRR13107018
bcftools query -f '%DP\n' -s SRR13107018 sample.vcf > output.vcf

#13. Extract data on the allele frequency of alternate alleles. Combine this data with the chromosome and position of the alternate allele
bcftools query -f '%CHROM\t%POS\t%AF\n' sample.vcf > alleles.vcf

#Manipulating SAM files
#1. Describe the format of the file and the data stored
The file begins with a header, which is optional. The header is used to describe source of data, reference sequence, method of alignment, etc., 
this will change depending on the aligner being used. Following the header is the alignment section. Each line that follows corresponds to alignment 
information for a single read. Each alignment line has 11 mandatory fields for essential mapping information and a variable number of other fields for 
aligner specific information.

#2. What does the header section of the file contain

Each header line begins with the character ‘@’ followed by one of the two-letter header record type codes defined in this section.
In the header, each line is TAB-delimited and, apart from @CO lines, each data fieldfollows a format ‘TAG:VALUE’ where TAG is a two-character 
string that defines the format and content of VALUE. Thus header lines match /^@(HD|SQ|RG|PG)(\t[A-Za-z][A-Za-z0-9]:[ -~]+)+$/ or /^@CO\t.*/.
Within each (non-@CO) header line, no field tag may appear more than once and the order in which the fields appear is not significant.

#3. How many samples are in the file
249
samtools view -H sample.sam | grep -c '@RG'

#4. How many alignments are in the file
35511
samtools view -c -F 4 sample.sam

#5. Get summary statistics for the alignments in the file

samtools flagstat sample.sam

  #summary statistics
36142 + 0 in total (QC-passed reads + QC-failed reads)
36142 + 0 primary
0 + 0 secondary
0 + 0 supplementary
0 + 0 duplicates
0 + 0 primary duplicates
35511 + 0 mapped (98.25% : N/A)
35511 + 0 primary mapped (98.25% : N/A)
27791 + 0 paired in sequencing
7407 + 0 read1
7409 + 0 read2
26134 + 0 properly paired (94.04% : N/A)
26529 + 0 with itself and mate mapped
631 + 0 singletons (2.27% : N/A)
228 + 0 with mate mapped to a different chr
126 + 0 with mate mapped to a different chr (mapQ>=5)

#6. Count the number of fields in the file

grep -v "@" sample.sam | awk -F '\t' '{print NF}' | sort -nu 

#7. Print all lines in the file that have @SQ and sequence name tag beginning with NT_

grep '@SQ.*NT_' sample.sam 

#8. Print all lines in the file that have @RG and LB tag beginning with Solexa

grep '@RG.*LB:Solexa' sample.sam 

#9. Extract primarily aligned sequences and save them in another file.

samtools view -f 2 -b sample.sam > aligned.bam

#10. Extract alignments that map to chromosomes 1 and 3. Save the output in BAM format.

grep -E "^[^@]*\t(1|3)\t" sample.sam | samtools view -bS - > mapped.bam

#11. How would you obtain unmapped reads from the file

samtools view -f 4 sample.sam > unmapped.bam

#12. How many reads are aligned to chromosome 4

samtools view sample.bam | awk '{print $3 == "4"}' | uniq -c

#13. Comment of the second and sixth column of the file
	## The second column of the file refers to the read name and the sixth column refers to the read flag. 
	The read flag is an integer value that encodes information about the alignment of the read, such as whether it is mapped or unmapped.

#14. Extract all optional fields of the file and save them in “optional_fields.txt”

awk '{ for (i=11; i<=NF; i++) print $i }' sample.sam > optional_fields.txt
